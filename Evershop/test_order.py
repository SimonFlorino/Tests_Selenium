# Generated by Selenium IDE
from selenium.webdriver.chrome.options import Options
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.common.exceptions import TimeoutException
from config import SeleniumConfig
import time

class TestOrder:
    BASE_URL = "http://localhost:3000"
    LOGIN_URL = f"{BASE_URL}/account/login"
    
    # Sélecteurs de connexion
    LOGIN_EMAIL = (By.NAME, "email")
    LOGIN_PASSWORD = (By.NAME, "password")
    LOGIN_BUTTON = (By.CSS_SELECTOR, "button[type='submit']")
    
    # Sélecteurs de produit
    PRODUCT_IMAGE = (By.CSS_SELECTOR, ".listing-tem:nth-child(1) img")
    QUANTITY_CONTAINER = (By.CSS_SELECTOR, ".gap-12")
    QUANTITY_INPUT = (By.NAME, "qty")
    ADD_TO_CART_BUTTON = (By.CSS_SELECTOR, ".button > span")
    CONTINUE_SHOPPING = (By.LINK_TEXT, "Continue Shopping")
    MENU_MEN = (By.LINK_TEXT, "Men")
    SECOND_PRODUCT_IMAGE = (By.CSS_SELECTOR, "img")
    
    # Sélecteurs de panier
    ADD_CART_POPUP = (By.ID, "add-cart-popup-button")
    COUPON_INPUT = (By.NAME, "coupon")
    APPLY_COUPON = (By.CSS_SELECTOR, ".col-span-1 > .button > span")
    CHECKOUT_BUTTON = (By.CSS_SELECTOR, ".shopping-cart-checkout-btn span")
    SHIPPING_METHODS_SECTION = (By.CSS_SELECTOR, "div.shipping-methods")
    SHIPPING_METHOD_LABEL = (By.CSS_SELECTOR, "label[for='method0']")
    
    # Sélecteurs d'adresse
    FULL_NAME = (By.NAME, "address[full_name]")
    TELEPHONE = (By.NAME, "address[telephone]")
    ADDRESS_1 = (By.NAME, "address[address_1]")
    CITY = (By.NAME, "address[city]")
    COUNTRY = (By.ID, "address[country]")
    PROVINCE = (By.ID, "address[province]")
    POSTCODE = (By.NAME, "address[postcode]")
    
    # Sélecteurs de paiement
    PAYMENT_SECTION = (By.CSS_SELECTOR, ".py-8:nth-of-type(3)")
    SUBMIT_BUTTON = (By.CSS_SELECTOR, ".form-submit-button span")
    CARD_ICON = (By.CSS_SELECTOR, ".feather")
    STRIPE_IFRAME = (By.CSS_SELECTOR, "iframe[name^='__privateStripeFrame']")
    CARD_NUMBER = (By.ID, "Field-numberInput")
    CARD_EXPIRY = (By.ID, "Field-expiryInput")
    CARD_CVC = (By.ID, "Field-cvcInput")
    STRIPE_RB = (By.CSS_SELECTOR, ".payment-method-list:nth-child(3) a")
    ERROR_TOAST = (By.CSS_SELECTOR, "div.Toastify__toast--error div[role='alert']")
    
    # Données de test
    CUSTOMER_EMAIL = "simon@simon.com"
    CUSTOMER_PASSWORD = "simon123"
    COUPON_CODE = "FREESHIPPING"
    
    # Données d'adresse
    ADDRESS_DATA = {
        'full_name': "Simon",
        'telephone': "0505050505",
        'address_1': "av de paris",
        'city': "Paris",
        'country': "France",
        'province': "Ile-de-France",
        'postcode': "75001"
    }
    
    # Données de carte bancaire
    CARD_DATA = {
        'valid': {
            'number': "4242 4242 4242 4242",
            'expiry': "04 / 26",
            'cvc': "242"
        },
        'invalid': {
            'number': "4000 0000 0000 9995",
            'expiry': "04 / 26",
            'cvc': "242"
        }
    }

    @pytest.fixture
    def selenium(self):
        config = SeleniumConfig(self.BASE_URL, disable_popups=True)
        config.setup_driver()

        yield config
        config.teardown_driver()

    def login_customer(self, selenium):
        """Connexion du client"""
        selenium.navigate_to("/account/login")
        
        # Remplir le formulaire de connexion
        selenium.wait_and_send_keys(self.LOGIN_EMAIL, self.CUSTOMER_EMAIL)
        selenium.wait_and_send_keys(self.LOGIN_PASSWORD, self.CUSTOMER_PASSWORD)
        selenium.wait_and_click(self.LOGIN_BUTTON)
        
        # Vérifier que la connexion a réussi
        try:
            WebDriverWait(selenium.driver, 10).until(
                EC.url_contains("/account")
            )
        except TimeoutException:
            pytest.fail("Login failed - not redirected to account page")

    #Pour tester uniquement l'échec du paiement : pytest test_order.py -v -k "test_order[False]"
    @pytest.mark.parametrize("payment_success", [True, False])
    def test_order(self, selenium, payment_success):
        # Connexion du client
        self.login_customer(selenium)
        
        # Retour à la page d'accueil
        selenium.navigate_to()
        
        # Cliquer sur le premier produit
        selenium.wait_and_click(self.PRODUCT_IMAGE)
        
        # Cliquer sur le conteneur de quantité
        selenium.wait_and_click(self.QUANTITY_CONTAINER)
        
        # Modifier la quantité
        quantity_input = selenium.wait_for_element(self.QUANTITY_INPUT)
        quantity_input.clear()  # Effacer la quantité existante
        quantity_input.send_keys("2")
        
        # Ajouter au panier
        selenium.wait_and_click(self.ADD_TO_CART_BUTTON)
        
        # Continuer les achats
        selenium.wait_and_click(self.CONTINUE_SHOPPING)
        
        # Ajouter un deuxième produit via le menu
        actions = ActionChains(selenium.driver)
        menu = selenium.wait_for_element((By.CSS_SELECTOR, "ul li:first-child"))
        actions.move_to_element(menu).perform()
        
        selenium.wait_and_click(self.MENU_MEN)
        selenium.wait_and_click(self.SECOND_PRODUCT_IMAGE)
        selenium.wait_and_click(self.ADD_TO_CART_BUTTON)
        
        # Aller au panier
        selenium.navigate_to("/cart")
        
        # Appliquer le code promo
        selenium.wait_and_send_keys(self.COUPON_INPUT, self.COUPON_CODE)
        selenium.wait_and_click(self.APPLY_COUPON)
        
        # Passer à la commande
        selenium.wait_and_click(self.CHECKOUT_BUTTON)
        
        # Vérifier si une adresse existe déjà
        try:
            address_rows = selenium.find_elements((By.CSS_SELECTOR, "div.grid-cols-4"))
            
            has_address = False
            for row in address_rows:
                try:
                    title = row.find_element(By.CSS_SELECTOR, "div.col-span-1 span").text.strip()
                    if title.lower() == "ship to":
                        address = row.find_element(By.CSS_SELECTOR, "div.col-span-2 span").text.strip()
                        has_address = address != ""
                        break
                except:
                    continue
            
            if not has_address:
                # Remplir l'adresse
                selenium.wait_and_send_keys(self.FULL_NAME, self.ADDRESS_DATA['full_name'])
                selenium.wait_and_send_keys(self.TELEPHONE, self.ADDRESS_DATA['telephone'])
                selenium.wait_and_send_keys(self.ADDRESS_1, self.ADDRESS_DATA['address_1'])
                selenium.wait_and_send_keys(self.CITY, self.ADDRESS_DATA['city'])
                
                # Sélectionner le pays
                country_select = selenium.wait_for_element(self.COUNTRY)
                country_select.click()
                country_select.find_element(By.XPATH, f"//option[. = '{self.ADDRESS_DATA['country']}']").click()
                
                # Sélectionner la région
                province_select = selenium.wait_for_element(self.PROVINCE)
                province_select.click()
                province_select.find_element(By.XPATH, f"//option[. = '{self.ADDRESS_DATA['province']}']").click()
                
                selenium.wait_and_send_keys(self.POSTCODE, self.ADDRESS_DATA['postcode'])
                
                # Attendre que la section des méthodes d'expédition soit chargée
                selenium.wait_for_element(self.SHIPPING_METHODS_SECTION)
                # Attendre un peu pour que les radio buttons soient chargés
                selenium.driver.implicitly_wait(2)                
                # Sélectionner la méthode d'expédition en cliquant sur le label
                selenium.wait_and_click(self.SHIPPING_METHOD_LABEL)
                
                # Cliquer d'abord sur le bouton de paiement
                selenium.wait_and_click(self.SUBMIT_BUTTON)

        except TimeoutException:
            pytest.fail("Could not find address section")
        
        selenium.scroll_down()  # scroll de 100 pixels vers le bas
                  
        # Attendre que le lien de Stripe soit présent et cliquable
        selenium.wait_and_click(self.STRIPE_RB)

        # Basculer vers l'iframe de Stripe
        iframe = selenium.wait_for_element(self.STRIPE_IFRAME)
        selenium.driver.switch_to.frame(iframe)
        
        # Choisir les données de carte en fonction du paramètre payment_success
        card_data = self.CARD_DATA['valid'] if payment_success else self.CARD_DATA['invalid']
        
        # Remplir les détails de la carte
        selenium.wait_and_send_keys(self.CARD_NUMBER, card_data['number'])
        selenium.wait_and_send_keys(self.CARD_EXPIRY, card_data['expiry'])
        selenium.wait_and_send_keys(self.CARD_CVC, card_data['cvc'])
        
        # Revenir au contenu principal
        selenium.driver.switch_to.default_content()
        
        selenium.scroll_down()

        # Valider la commande
        selenium.wait_and_click(self.SUBMIT_BUTTON)

        if payment_success:
            # Vérifier que la commande a bien été passée
            try:
                selenium.wait_for_element_visible((By.CSS_SELECTOR, ".checkout-success-customer-info"))
                order_number = selenium.driver.find_element(By.CSS_SELECTOR, ".thank-you span").text
                assert order_number != ""
            except TimeoutException:
                pytest.fail("La commande n'a pas été confirmée - page de confirmation non trouvée")
        else:
            # Vérifier que le message d'erreur s'affiche
            try:
                error_message = selenium.wait_for_element_visible(self.ERROR_TOAST)
                assert "Payment failed" in error_message.text
            except TimeoutException:
                pytest.fail("Le message d'erreur de paiement n'a pas été affiché")

        

