# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options

class TestLinks():
  def setup_method(self, method):
    
    options = Options()
    options.add_extension("C:/Tools/Tests_Selenium/tests_pytest/adblock.crx")
    self.driver = webdriver.Chrome(options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_links(self):
    self.driver.get("https://demoqa.com/links")
    self.driver.set_window_size(1460, 1040)

    element = WebDriverWait(self.driver, 30).until(
      expected_conditions.visibility_of_element_located((By.ID, "invalid-url"))
    )
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.ID, "invalid-url").click()

    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.ID, "simpleLink").click()
    self.vars["win4414"] = self.wait_for_window(2000)
    self.vars["root"] = self.driver.current_window_handle
    self.driver.switch_to.window(self.vars["win4414"])
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
    self.driver.switch_to.frame(6)
    self.driver.switch_to.frame(0)
    self.driver.find_element(By.ID, "dismiss-button").click()
    self.driver.switch_to.default_content()
    self.driver.switch_to.default_content()
    self.vars["window_handles"] = self.driver.window_handles
    self.driver.find_element(By.ID, "dynamicLink").click()
    self.vars["win599"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win599"])
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
    self.driver.find_element(By.ID, "created").click()
    self.driver.find_element(By.ID, "no-content").click()
    self.driver.find_element(By.ID, "moved").click()
    self.driver.find_element(By.ID, "bad-request").click()
    self.driver.find_element(By.ID, "unauthorized").click()
    self.driver.find_element(By.ID, "forbidden").click()
    self.driver.find_element(By.ID, "invalid-url").click()
    self.driver.find_element(By.CSS_SELECTOR, "b:nth-child(1)").click()
    self.driver.close()
  

if __name__ == "__main__":
  test = TestLinks()
  test.setup_method(None)
  try:
      test.test_links()
  finally:
      test.teardown_method(None)